#!/usr/bin/env python3

import sys
import os
import subprocess

shader_folder = os.path.dirname(sys.argv[0])
shader_paths = sys.argv[1:]
shader_paths.sort()
shader_header_path = os.path.join(shader_folder, 'shaders.h')

os.chdir(shader_folder)

file_string_list = ['#pragma once\n',
                    '/* This file is automatically generated from the .fs and .vs files in the shader folder, by generateShaderInclude.py */\n',
                    '#include <string>\n']

for shader_path in shader_paths:
    output = subprocess.Popen(['xxd', '-i', os.path.basename(shader_path)],
                              stdout=subprocess.PIPE,
                              stderr=subprocess.STDOUT)
    stdout, stderr = output.communicate()
    file_string_list.append(stdout.decode("utf-8").replace('unsigned', 'const unsigned'))
    variable_name = os.path.basename(shader_path).replace('.', '_')
    file_string_list.append(f'const std::string {variable_name}_str({variable_name}, {variable_name} + {variable_name}_len); // NOLINT \n')


new_shader_file_string = '\n'.join(file_string_list)

if os.path.isfile(shader_header_path):
    with open(shader_header_path, 'r') as shader_header_file:
        existing_shader_file_string = shader_header_file.read()
else:
    existing_shader_file_string = ""

if existing_shader_file_string != new_shader_file_string:
    with open(shader_header_path, 'w') as shader_header_file:
        shader_header_file.write(new_shader_file_string)
